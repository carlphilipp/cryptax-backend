buildscript {
    ext {
        projectName = rootProject.name

        assertJVersion = '3.10.0'
        commonsIoVersion = '2.6'
        commonsCodecVersion = '1.11'
        disruptorVersion = '3.4.2'
        dropwizardVersion = '4.0.2'
        googleCloudDatastoreVersion = '1.38.0'
        googleCloudSqlVersion = '1.0.10'
        junitVersion = '5.2.0'
        jacksonVersion = '2.9.6'
        jasyptVersion = '1.9.2'
        jooqVersion = '3.11.3'
        kotlinVersion = '1.2.60'
        kodeinVersion = '5.2.0'
        log4j2Version = '2.11.0'
        mockitoVersion = '2.19.0'
        mockitoKotlinVersion = '2.0.0-RC1'
        okHttpVersion = '3.11.0'
        restAssuredVersion = '3.1.0'
        rxjava2Version = '2.1.17'
        slf4jVersion = '1.8.0-beta2'
        vertxVersion = '3.5.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    group = 'com.cryptax'
    version = '0.0.6-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    repositories {
        mavenCentral()
        jcenter()
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/kotlin']
            }
        }
    }

    configurations.all {
        exclude module: 'kotlin-stdlib-jdk7'
        exclude module: 'slf4j-ext'
        exclude module: 'grpc-context'

        resolutionStrategy {
            force "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
            force "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
            force "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
            force "commons-codec:commons-codec:$commonsCodecVersion"
            force "commons-io:commons-io:$commonsIoVersion"
        }
    }

    dependencies {
        implementation(
            [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'],
            [group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion],
            [group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j2Version],
            [group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j2Version],
            [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j2Version],
            [group: 'com.lmax', name: 'disruptor', version: disruptorVersion]
        )

        testImplementation(
            [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion],
            [group: 'org.assertj', name: 'assertj-core', version: assertJVersion],
        )
    }

    test {
        useJUnitPlatform()

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
            exceptionFormat "full"
        }

        reports {
            html.enabled = true
        }

        jacoco {
            excludes += []
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        destinationDir = compileJava.destinationDir
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    }

    clean.doFirst {
        delete 'out'
        delete '.vertx'
    }

    jacocoTestReport {
        reports {
            xml.setEnabled(true)
            csv.setEnabled(false)
            html.setEnabled(true)
        }
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

jar.enabled = false

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/com/cryptax/config/**', '**/entity/**', '**/model/**', '**/app/Main**'])
        })
    }
}
