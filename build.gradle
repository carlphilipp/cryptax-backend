buildscript {
    ext { projectName = rootProject.name }

    repositories { mavenCentral() }

    dependencies { classpath Lib.kotlin_gradle }
}

if (JavaVersion.current() != JavaVersion.VERSION_11) {
    throw new GradleException("This build must be run with java 11. Current version: " + JavaVersion.current())
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    group = 'com.cryptax'
    version = '2.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
        jcenter()
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/kotlin']
            }
        }
    }

    configurations.all {
        exclude module: 'kotlin-stdlib-jdk7'
        exclude module: 'slf4j-ext'
        exclude module: 'grpc-context'
        exclude module: 'log4j-slf4j-impl'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'

        resolutionStrategy {
            force Lib.jackson_core
            force Lib.jackson_annotations
            force Lib.jackson_databind
            force Lib.jackson_yaml
            force Lib.kotlin_reflect
            force Lib.commons_codec
            force Lib.commons_io
            force Lib.rx
            force Lib.http_client
            force Lib.http_core
            force Lib.mockito
        }
    }

    dependencies {
        implementation Lib.kotlin_stdlib
        implementation Lib.slf4j
        implementation Lib.log4j2_core
        implementation Lib.log4j2_api
        implementation Lib.log4j2_slf4j18
        implementation Lib.disruptor

        testImplementation Lib.junit_api
        testImplementation Lib.junit_engine
        testImplementation Lib.junit_params
        testImplementation Lib.junit_platform_runner
        testImplementation Lib.junit_platform_commons
        testImplementation Lib.junit_platform_engine
        testImplementation Lib.assertj
    }

    test {
        useJUnitPlatform()

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
            exceptionFormat "full"
        }

        reports {
            html.enabled = true
        }

        jacoco {
            excludes += []
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        destinationDir = compileJava.destinationDir
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    }

    clean.doFirst {
        delete 'out'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = '0.8.2'
    }

    task allDeps(type: DependencyReportTask) {}
}

apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

jar.enabled = false

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(subprojects.sourceSets.main.output)
    executionData.setFrom(files(subprojects.jacocoTestReport.executionData))
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData.setFrom(files(executionData.findAll { it.exists() }))
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/com/cryptax/app/config/**',
                '**/com/cryptax/config/**',
                '**/entity/**',
                '**/model/**',
                '**/cryptax/app/Application**'])
        }))
    }
}
