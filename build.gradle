buildscript {
	ext {
		kotlin_version = '1.2.51'
		junit_version = '5.2.0'
		mockito_version = '2.19.0'
		jackson_version = '2.9.6'
		vertx_version = '3.5.2'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'kotlin'
	apply plugin: 'jacoco'

	group = 'com.cryptax'
	version = '1.0.0'

	sourceCompatibility = JavaVersion.VERSION_1_10
	targetCompatibility = JavaVersion.VERSION_1_10

	repositories {
		jcenter()
	}

	compileJava {
		doFirst {
			options.compilerArgs = [
				'--module-path', classpath.asPath,
			]
			classpath = files()
		}
	}

	sourceSets {
		main {
			java {
				srcDirs = ['src/main/kotlin']
			}
		}
	}

	dependencies {
		implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
		implementation 'org.slf4j:slf4j-api:1.8.0-beta2'
		implementation 'org.apache.logging.log4j:log4j-core:2.11.0'
		implementation 'org.apache.logging.log4j:log4j-api:2.11.0'
		implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'

		testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
		testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
		testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
	}

	test {
		useJUnitPlatform()

		testLogging {
			events 'PASSED', 'FAILED', 'SKIPPED'
		}

		reports {
			html.enabled = true
		}

/*		jacoco {
			append = false
			destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
			//classDumpFile = file("$buildDir/jacoco/classpathdumps")
		}*/
	}

	compileKotlin {
		kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
		destinationDir = compileJava.destinationDir
	}

	compileTestKotlin {
		kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
	}

	clean.doFirst {
		delete 'out'
	}

	jacocoTestReport {
		reports {
			xml.setEnabled(false)
			csv.setEnabled(false)
		}

		afterEvaluate {
			classDirectories = files(classDirectories.files.collect {
				fileTree(dir: it,
					exclude: ['codeeval/**',
							  'crackingthecode/part3knowledgebased/**',
							  '**/Chapter7ObjectOrientedDesign**',
							  '**/Chapter11Testing**',
							  '**/Chapter12SystemDesignAndMemoryLimits**',
							  'projecteuler/**'])
			})
		}
	}
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/allTests")
	reportOn subprojects*.test
}
