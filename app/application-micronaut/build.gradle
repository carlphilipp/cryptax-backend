plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
}

version "0.1"
group "example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:1.2.5")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Version.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${Version.kotlin}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    kapt platform("io.micronaut:micronaut-bom:1.2.5")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut.configuration:micronaut-openapi"
    kaptTest platform("io.micronaut:micronaut-bom:1.2.5")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"

    implementation(project(":cache"))
    implementation(project(":cloud-datastore"))
    implementation(project(":config"))
    implementation(project(":controller"))
    implementation(project(":domain"))
    implementation(project(":email"))
    implementation(project(":health"))
    implementation(project(":in-memory-db-simple"))
    implementation(project(":id-generator"))
    implementation(project(":jwt"))
    implementation(project(":price"))
    implementation(project(":security"))
    implementation(project(":usecase"))
    implementation(Lib.okhttp)
    implementation(Lib.hazelcast)
    implementation(Lib.jackson_kotlin)
    implementation(Lib.google_cloud_datasource)
    implementation(Lib.google_auth)
    implementation(Lib.reactor)
    implementation(Lib.dropwizard_healthchecks)
    implementation(Lib.jjwt)
    implementation(Lib.jaxb)

    //compile 'io.micronaut.configuration:micronaut-hibernate-validator:1.2.0'

    testImplementation(Lib.rest_assured)
}

test.classpath += configurations.developmentOnly

mainClassName = "com.cryptax.app.Application"

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
