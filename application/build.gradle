buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath 'com.netflix.nebula:gradle-info-plugin:3.8.0'
    }
}

apply plugin: 'kotlin-spring'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nebula.info'

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'org.springframework', module: 'spring-jcl'
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
}

dependencies {
    implementation(
        project(':cache'),
        project(':cloud-datastore'),
        project(':config'),
        project(':controller'),
        project(':domain'),
        project(':email'),
        project(':health'),
        project(':in-memory-db-simple'),
        project(':id-generator'),
        project(':price'),
        project(':security'),
        project(':usecase'),

        [group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'],
        [group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'],
        [group: 'org.springframework.boot', name: 'spring-boot-starter-security'],

        [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion],
        [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion],
        [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jacksonVersion],

        [group: 'com.squareup.okhttp3', name: 'okhttp', version: okHttpVersion],
        [group: 'com.google.cloud', name: 'google-cloud-datastore', version: googleCloudDatastoreVersion],
        [group: 'com.google.auth', name: 'google-auth-library-appengine', version: '0.10.0'],
        [group: 'org.hibernate.validator', name: 'hibernate-validator', version: hibernatesValidator],
        [group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'],
        [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.12'],
        [group: 'io.reactivex.rxjava2', name: 'rxjava', version: rxjava2Version],
        [group: 'io.projectreactor.addons', name: 'reactor-adapter', version: '3.1.7.RELEASE'],
        [group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version: dropwizardVersion],
    )

    testImplementation(
        [group: 'org.springframework.boot', name: 'spring-boot-starter-test'],
        [group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.3.0'],
        [group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion],
    )
}

task copyJarToRoot {
    doLast {
        def jarName = "application-" + version + ".jar"
        def outputDirectory = "${rootDir}/build"

        def currentJar = file("${buildDir}/libs/$jarName")
        def outputJar = "$outputDirectory/$projectName-spring-boot" + ".jar"

        currentJar.renameTo(outputJar)
        println("Move $jarName to $outputDirectory/$projectName-spring-boot" + ".jar")
    }
}

build.finalizedBy(copyJarToRoot)

test {
    testLogging.showStandardStreams = true
}
