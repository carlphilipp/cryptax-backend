import java.time.LocalDateTime
import java.time.ZoneId

plugins {
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

ext.moduleName = 'cryptax.app'

// needed for new jigsaw module
configurations.all {
    exclude module: 'swagger-parser-v2-converter'
}

dependencies {
    implementation(
        project(':config'),
        project(':domain'),
        project(':controller'),
        project(':validation'),
        project(':email'),
        project(':cache'),
        [group: 'io.vertx', name: 'vertx-web', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-auth-jwt', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-web-api-contract', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-rx-java2', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-dropwizard-metrics', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-mail-client', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-hazelcast', version: vertxVersion],
        [group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version: dropwizardVersion],
        [group: 'io.reactivex.rxjava2', name: 'rxjava', version: rxjava2Version],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion],
        [group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion],
        [group: 'org.kodein.di', name: 'kodein-di-generic-jvm', version: kodeinVersion],
    )

    testImplementation(
        project(':in-memory-db-simple'),
        project(':id-generator'),
        [group: 'io.vertx', name: 'vertx-web-client', version: vertxVersion],
        [group: 'io.vertx', name: 'vertx-junit5', version: vertxVersion],
        [group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion],
        [group: 'io.rest-assured', name: 'json-path', version: restAssuredVersion],
        [group: 'org.mockito', name: 'mockito-core', version: mockitoVersion],
        [group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion],
        [group: 'com.nhaarman.mockitokotlin2', name: 'mockito-kotlin', version: mockitoKotlinVersion],
    )
}

task createProperties {
    doLast {
        def file = new File("$buildDir/resources/main/info.properties")
        if (file.exists()) {
            file.delete()
        }
        def properties = []
        def version = "version=" + project.version.toString()
        def time = "createdAt=" + LocalDateTime.now(ZoneId.of("America/Chicago"))
        properties << version
        properties << time
        writeToFile(file, properties)
    }
}

mainClassName = 'com.cryptax.app.Main'

shadowJar {
    dependsOn createProperties
    baseName = rootProject.name
    classifier = null
    manifest {
        attributes 'Description': 'Cryptax backend fat jar'
    }
}

test {
    testLogging.showStandardStreams = true
}

task copyJarToRoot {
    doLast {
        def jarName = projectName + "-" + version + ".jar"
        def outputDirectory = "${rootDir}/build/"

        def currentJar = file("${buildDir}/libs/$jarName")
        def outputJar = "$outputDirectory/$projectName" + ".jar"

        currentJar.renameTo(outputJar)
        println("Move $jarName to $outputDirectory/$projectName" + ".jar")
    }
}

build.finalizedBy(copyJarToRoot)

private static void writeToFile(def file, def properties) {
    properties.each {
        file << ("${it}\n")
    }
}
